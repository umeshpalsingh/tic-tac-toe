{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc3a8e85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {FaTimes, FaPen, FaRegCircle} from \"react-icons/fa\"\r\n\r\nconst Icon = ({name}) => {\r\n    if(name === \"circle\") {\r\n        return <FaRegCircle className=\"icon\" />;\r\n    } else if(name === \"cross\") {\r\n        return <FaTimes className=\"icon\" />;\r\n    } else {\r\n        return <FaPen className=\"icon\" />;\r\n    }\r\n}\r\n\r\nexport default Icon;","import React, {useState} from 'react';\nimport Icon from './components/Icon';\n\n// Importing Toastify here\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Col, Row, Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nconst itemArray = new Array(9).fill('empty')\n\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill('empty', 0, 9);\n  }\n\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] === itemArray[1] && \n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) { \n        setWinMessage(`${itemArray[0]} wins`) \n      } \n      else if(\n        itemArray[3] === itemArray[4] &&\n        itemArray[3] === itemArray[5] &&\n        itemArray[3] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[3]} wins`)\n      } \n      else if(\n        itemArray[6] === itemArray[7] &&\n        itemArray[6] === itemArray[8] &&\n        itemArray[6] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[6]} wins`)\n      } \n      else if(\n        itemArray[0] === itemArray[3] &&\n        itemArray[0] === itemArray[6] &&\n        itemArray[0] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[0]} wins`)\n      } else if(\n        itemArray[1] === itemArray[4] &&\n        itemArray[1] === itemArray[7] &&\n        itemArray[1] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[1]} wins`)\n      } else if(\n        itemArray[2] === itemArray[5] &&\n        itemArray[2] === itemArray[8] &&\n        itemArray[2] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[2]} wins`)\n      } else if(\n        itemArray[0] === itemArray[4] &&\n        itemArray[0] === itemArray[8] &&\n        itemArray[0] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[0]} wins`)\n      } else if(\n        itemArray[2] === itemArray[4] &&\n        itemArray[2] === itemArray[6] &&\n        itemArray[2] !== \"empty\"\n    ) {\n          setWinMessage(`${itemArray[2]} wins`)\n      }\n  }\n\n  const changeItem = itemNumber => {\n    if(winMessage) {\n      return toast(winMessage, {type: \"success\"});\n    }\n\n    if(itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross);\n    } else {\n      return toast(\"already filled\", {type: \"error\"});\n    }\n\n    checkIsWinner();\n  }\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"my-2 text-center\">\n              <h1 className=\"animate text-success text-center text-uppercase mb-4\">{winMessage}</h1>\n              <Button className=\"px-5 mb-5\" color=\"success\" block onClick={reloadGame}>Reload Game</Button>\n            </div>\n          ) : (\n            <h1 className=\"mb-5 text-center text-warning\">{isCross ? \"Cross\" : \"Circle\"} Turns</h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card type=\"button\" className=\"card\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}